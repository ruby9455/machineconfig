
from machineconfig.utils.utils2 import randstr

import random
import shlex
from pathlib import Path
from typing import Literal, TypeAlias


AGENTS: TypeAlias = Literal[
    "cursor-agent", "gemini", "crush", "q", "onlyPrepPromptFiles"
    # warp terminal
]
AGENT_NAME_FORMATTER = "agent_{idx}_cmd.sh"  # e.g., agent_0_cmd.sh


def get_gemini_api_keys() -> list[str]:
    from machineconfig.utils.utils2 import read_ini
    config = read_ini(Path.home().joinpath("dotfiles/creds/llm/gemini/api_keys.ini"))
    res: list[str] = []
    for a_section_name in list(config.sections()):
        a_section = config[a_section_name]
        if "api_key" in a_section:
            api_key = a_section["api_key"].strip()
            if api_key:
                res.append(api_key)
    print(f"Found {len(res)} Gemini API keys configured.")
    return res

def prep_agent_launch(repo_root: Path, prompts_material: list[str], prompt_prefix: str, keep_material_in_separate_file: bool,  agent: AGENTS, *, job_name: str) -> Path:
    session_root = repo_root / ".ai" / f"tmp_prompts/{job_name}_{randstr()}"
    session_root.mkdir(parents=True, exist_ok=True)
    prompt_folder = session_root / "prompts"
    prompt_folder.mkdir(parents=True, exist_ok=True)

    all_materials_scripts: list[Path] = []
    for idx, a_prompt_material in enumerate(prompts_material):
        prompt_root = prompt_folder / f"agent_{idx}"
        prompt_root.mkdir(parents=True, exist_ok=True)
        prompt_path = prompt_root / f"agent_{idx}_prompt.txt"
        if keep_material_in_separate_file:
            prompt_material_path = prompt_root / f"agent_{idx}_material.txt"
            prompt_material_path.write_text(a_prompt_material, encoding="utf-8")
            prompt_path.write_text(prompt_prefix + f"""\nPlease only look @ {prompt_material_path}. You don't need to do any other work beside the content of this material file.""", encoding="utf-8")
            all_materials_scripts.append(prompt_material_path)
        else:
            prompt_material_path = prompt_path
            prompt_path.write_text(prompt_prefix + """\nPlease only look @ the following:\n""" + a_prompt_material, encoding="utf-8")

        agent_cmd_launch_path = prompt_root / AGENT_NAME_FORMATTER.format(idx=idx)  # e.g., agent_0_cmd.sh
        random_sleep_time = random.uniform(0, 5)
        cmd_prefix = f"""
#!/usr/bin/env bash

# AGENT-{idx}-LAUNCH-SCRIPT
# Auto-generated by fire_agents.py

export FIRE_AGENTS_AGENT_NAME="{agent}"
export FIRE_AGENTS_JOB_NAME="{job_name}"
export FIRE_AGENTS_PROMPT_FILE="{prompt_path}"
export FIRE_AGENTS_MATERIAL_FILE="{prompt_material_path}"
export FIRE_AGENTS_AGENT_LAUNCHER="{agent_cmd_launch_path}"

echo "Sleeping for {random_sleep_time:.2f} seconds to stagger agent startups..."
sleep {random_sleep_time:.2f}
echo "Launching agent {agent} with prompt from {prompt_path}"
echo "Launching agent {agent} with command from {agent_cmd_launch_path}"
echo "--------START OF AGENT OUTPUT--------"
sleep 0.1

"""
        match agent:
            case "gemini":
                model = "gemini-2.5-pro"
                # model = "gemini-2.5-flash-lite"
                # model = None  # auto-select
                if model is None:
                    model_arg = ""
                else:
                    model_arg = f"--model {shlex.quote(model)}"
                # Need a real shell for the pipeline; otherwise '| gemini ...' is passed as args to 'cat'
                safe_path = shlex.quote(str(prompt_path))
                api_keys = get_gemini_api_keys()
                api_key = api_keys[idx % len(api_keys)] if api_keys else ""
                # Export the environment variable so it's available to subshells
                cmd = f"""
export GEMINI_API_KEY={shlex.quote(api_key)}
echo "Using Gemini API key $GEMINI_API_KEY"
bash -lc 'cat {safe_path} | gemini {model_arg} --yolo --prompt'
"""
            case "cursor-agent":
                # As originally implemented
                cmd = f"""

cursor-agent --print --output-format text < {prompt_path}

"""
            case "crush":
                cmd = f"""
crush run {prompt_path}
"""
            case "q":
                cmd = f"""
q chat --no-interactive --trust-all-tools {prompt_path}
"""
            case "onlyPrepPromptFiles":
                cmd = f"""
echo "Prepared prompt file at {prompt_path}"
"""
            case _:
                raise ValueError(f"Unsupported agent type: {agent}")
        cmd_postfix = """
sleep 0.1
echo "---------END OF AGENT OUTPUT---------"
"""
        agent_cmd_launch_path.write_text(cmd_prefix + cmd + cmd_postfix, encoding="utf-8")


    # print(f"Launching a template with #{len(tab_config)} agents")
    if len(all_materials_scripts) > 0:
        all_materials_list_path = session_root / "all_materials_redistributed.txt"
        all_materials_list_path.write_text("\n".join(str(p) for p in all_materials_scripts), encoding="utf-8")
        print(f"All prompt materials listed @ {all_materials_list_path}")
    return session_root


def get_agents_launch_layout(session_root: Path):
    from machineconfig.utils.schemas.layouts.layout_types import TabConfig, LayoutConfig, LayoutsFile
    tab_config: list[TabConfig] = []
    prompt_root = session_root / "prompts"
    all_dirs_under_prompts = [d for d in prompt_root.iterdir() if d.is_dir()]
    launch_agents_squentially = ""
    for a_prompt_dir in all_dirs_under_prompts:
        idx = a_prompt_dir.name.split("_")[-1]  # e.g., agent_0 -> 0
        agent_cmd_path = a_prompt_dir / AGENT_NAME_FORMATTER.format(idx=idx)
        fire_cmd = f"bash {shlex.quote(str(agent_cmd_path))}"
        tab_config.append(TabConfig(tabName=f"Agent{idx}", startDir=str(session_root.parent.parent.parent), command=fire_cmd))
        launch_agents_squentially += f". {shlex.quote(str(agent_cmd_path))}\n"
    layout = LayoutConfig(layoutName="Agents", layoutTabs=tab_config)
    (session_root / "launch_all_agents_sequentially.sh").write_text(launch_agents_squentially, encoding="utf-8")
    layouts_file: LayoutsFile = LayoutsFile(version="1.0", layouts=[layout])
    return layouts_file
